# =====================================
# 🚀 优化版本 CMakeLists.txt - 使用 vcpkg 预编译库
# 此版本避免每次重新编译 Abseil，显著提升构建速度
# 使用方法: 将此文件重命名为 CMakeLists.txt 覆盖原文件
# =====================================

cmake_minimum_required(VERSION 3.16)
project(UploadClient VERSION 1.0.0)

# 设置C++标准
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# vcpkg/Qt路径
set(CMAKE_PREFIX_PATH "D:/cppsoft/vcpkg/installed/x64-windows")
set(CMAKE_TOOLCHAIN_FILE "D:/cppsoft/vcpkg/scripts/buildsystems/vcpkg.cmake")

# 查找库 - 优先使用 vcpkg 预编译版本
find_package(Qt6 REQUIRED COMPONENTS Core Widgets)
find_package(FlatBuffers REQUIRED)

# 🚀 优化: 使用 vcpkg 的 Abseil 预编译库（如果可用）
find_package(absl CONFIG)
if(absl_FOUND)
    message(STATUS "✅ 使用 vcpkg 预编译 Abseil 库 (推荐)")
    set(USING_VCPKG_ABSEIL TRUE)
else()
    message(STATUS "⚠️ vcpkg Abseil 未找到，将使用源码构建")
    set(USING_VCPKG_ABSEIL FALSE)
endif()

# TOML库支持 (使用本地toml11)
set(TOML11_LOCAL_PATH "${CMAKE_CURRENT_SOURCE_DIR}/3rdParty/include/toml11")
if(EXISTS "${TOML11_LOCAL_PATH}/toml.hpp")
    message(STATUS "✅ 找到本地toml11库: ${TOML11_LOCAL_PATH}")
    set(TOML11_LOCAL_AVAILABLE TRUE)
else()
    message(WARNING "⚠️ 本地toml11库未找到: ${TOML11_LOCAL_PATH}/toml.hpp")
    set(TOML11_LOCAL_AVAILABLE FALSE)
endif()

# spdlog库支持 (优先vcpkg，备选FetchContent)
find_package(spdlog CONFIG)
if(spdlog_FOUND)
    message(STATUS "✅ 使用 vcpkg spdlog 库")
    set(USING_VCPKG_SPDLOG TRUE)
else()
    message(STATUS "📦 使用 FetchContent 下载 spdlog")
    set(USING_VCPKG_SPDLOG FALSE)
    
    include(FetchContent)
    FetchContent_Declare(
        spdlog
        GIT_REPOSITORY https://github.com/gabime/spdlog.git
        GIT_TAG        v1.12.0
        GIT_SHALLOW    TRUE
    )
    
    set(SPDLOG_BUILD_EXAMPLE OFF CACHE BOOL "")
    set(SPDLOG_BUILD_TESTS OFF CACHE BOOL "")
    set(SPDLOG_BUILD_BENCH OFF CACHE BOOL "")
    set(SPDLOG_FMT_EXTERNAL OFF CACHE BOOL "")
    set(SPDLOG_BUILD_SHARED OFF CACHE BOOL "")
    
    FetchContent_MakeAvailable(spdlog)
endif()

# magic_enum库支持 (使用本地头文件)
set(MAGIC_ENUM_LOCAL_PATH "${CMAKE_CURRENT_SOURCE_DIR}/3rdParty/magic_enum")
if(EXISTS "${MAGIC_ENUM_LOCAL_PATH}/magic_enum.hpp")
    message(STATUS "✅ 找到本地magic_enum库: ${MAGIC_ENUM_LOCAL_PATH}")
    set(MAGIC_ENUM_LOCAL_AVAILABLE TRUE)
else()
    message(WARNING "⚠️ 本地magic_enum库未找到: ${MAGIC_ENUM_LOCAL_PATH}/magic_enum.hpp")
    set(MAGIC_ENUM_LOCAL_AVAILABLE FALSE)
endif()

# 启用Qt6的MOC/UIC/RCC
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)

# 🚀 条件性 Abseil 配置 - 只在需要时从源码构建
if(NOT USING_VCPKG_ABSEIL)
    # 设置 Abseil 构建选项以减少编译时间
    set(ABSL_ENABLE_INSTALL ON CACHE BOOL "")
    set(ABSL_BUILD_TESTING OFF CACHE BOOL "")
    set(ABSL_BUILD_MONOLITHIC_SHARED_LIBS OFF CACHE BOOL "")
    set(ABSL_USE_SYSTEM_INCLUDES ON CACHE BOOL "")
    
    # 只有在首次构建或源码变更时才重新编译
    if(NOT TARGET absl::base)
        add_subdirectory(3rdParty/abseil-cpp)
    endif()
    message(STATUS "⚠️ 使用本地Abseil源码库 (较慢)")
    message(STATUS "💡 提示: 建议运行 'vcpkg install abseil:x64-windows' 安装预编译版本以加速构建")
endif()

# FlatBuffers 配置
set(FBS_FILES ${CMAKE_CURRENT_SOURCE_DIR}/FlatBuffer/upload_file_info.fbs)
set(FBS_GEN_DIR ${CMAKE_CURRENT_SOURCE_DIR}/generated)

# 自动查找 FlatBuffer 目录下所有 .fbs 文件并生成对应 .h/.cc
file(GLOB FBS_FILES "${CMAKE_CURRENT_SOURCE_DIR}/FlatBuffer/*.fbs")

# 指定 flatc.exe 的绝对路径
set(FLATC_EXE "D:/cppsoft/vcpkg/installed/x64-windows/tools/flatbuffers/flatc.exe")

set(GEN_HEADERS)
set(GEN_SOURCES)
foreach(FBS_FILE ${FBS_FILES})
    get_filename_component(FBS_NAME ${FBS_FILE} NAME_WE)
    list(APPEND GEN_HEADERS "${CMAKE_CURRENT_SOURCE_DIR}/FlatBuffer/${FBS_NAME}_generated.h")
    list(APPEND GEN_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/FlatBuffer/${FBS_NAME}_generated.cpp")
    add_custom_command(
        OUTPUT "${CMAKE_CURRENT_SOURCE_DIR}/FlatBuffer/${FBS_NAME}_generated.h"
               "${CMAKE_CURRENT_SOURCE_DIR}/FlatBuffer/${FBS_NAME}_generated.cpp"
        COMMAND ${FLATC_EXE} --cpp --gen-object-api -o ${CMAKE_CURRENT_SOURCE_DIR}/FlatBuffer ${FBS_FILE}
        DEPENDS ${FBS_FILE}
        COMMENT "Generating FlatBuffers C++ code from ${FBS_FILE}"
    )
endforeach()
add_custom_target(FlatBuffersGen ALL DEPENDS ${GEN_HEADERS} ${GEN_SOURCES})

# 收集源文件
file(GLOB_RECURSE SOURCES
    "src/*.cpp"
    "src/*.h"
)

file(GLOB_RECURSE HEADERS
    "include/*.h"
    "include/*.hpp"
)

file(GLOB_RECURSE THIRD_PARTY_SOURCES
    "3rdParty/src/*.cpp"
    "3rdParty/src/*.h"
)

file(GLOB_RECURSE THIRD_PARTY_HEADERS
    "3rdParty/include/*.h"
    "3rdParty/include/*.hpp"
)

# 收集 FlatBuffer 目录下所有 _generated.h/_generated.cpp 文件
file(GLOB FLATBUFFERS_GENERATED_SOURCES
    "${CMAKE_CURRENT_SOURCE_DIR}/FlatBuffer/*_generated.h"
    "${CMAKE_CURRENT_SOURCE_DIR}/FlatBuffer/*_generated.cpp"
)

message(STATUS "C++ Standard: ${CMAKE_CXX_STANDARD}")
message(STATUS "Build Type: ${CMAKE_BUILD_TYPE}")
message(STATUS "Qt6 Version: ${Qt6_VERSION}")
message(STATUS "Compiler: ${CMAKE_CXX_COMPILER_ID}")

# 创建可执行文件
add_executable(UploadClient 
    ${SOURCES} 
    ${HEADERS} 
    ${THIRD_PARTY_SOURCES} 
    ${THIRD_PARTY_HEADERS}
    ${FLATBUFFERS_GENERATED_SOURCES}
)

# 🚀 优化的库链接配置
target_link_libraries(UploadClient PRIVATE
    Qt6::Core
    Qt6::Widgets
    flatbuffers::flatbuffers
)

# spdlog 链接
if(USING_VCPKG_SPDLOG)
    target_link_libraries(UploadClient PRIVATE spdlog::spdlog)
else()
    target_link_libraries(UploadClient PRIVATE spdlog::spdlog)
endif()

# 🚀 优化的 Abseil 库链接
if(USING_VCPKG_ABSEIL)
    # 使用 vcpkg 预编译版本
    target_link_libraries(UploadClient PRIVATE
        absl::log_severity
        absl::strings
        absl::base
        absl::log
        absl::time
    )
    message(STATUS "✅ 链接 vcpkg Abseil 预编译库 (快速)")
else()
    # 使用源码构建版本
    target_link_libraries(UploadClient PRIVATE
        absl::log_severity
        absl::strings
        absl::base
        absl::log
        absl::time
    )
    message(STATUS "⚠️ 链接本地构建 Abseil 库 (较慢)")
endif()

# 包含目录配置
target_include_directories(UploadClient PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}/include
    ${CMAKE_CURRENT_SOURCE_DIR}/3rdParty/include
    ${CMAKE_CURRENT_SOURCE_DIR}/src
    ${CMAKE_CURRENT_SOURCE_DIR}/FlatBuffer
)

# toml11 包含目录
if(TOML11_LOCAL_AVAILABLE)
    target_include_directories(UploadClient PRIVATE ${TOML11_LOCAL_PATH})
    message(STATUS "✅ 使用本地toml11库: ${TOML11_LOCAL_PATH}")
endif()

# magic_enum 包含目录
if(MAGIC_ENUM_LOCAL_AVAILABLE)
    target_include_directories(UploadClient PRIVATE ${MAGIC_ENUM_LOCAL_PATH})
    message(STATUS "✅ 使用本地magic_enum库: ${MAGIC_ENUM_LOCAL_PATH}")
endif()

# 依赖关系
add_dependencies(UploadClient FlatBuffersGen)
if(NOT USING_VCPKG_ABSEIL AND TARGET absl::base)
    add_dependencies(UploadClient absl::base)
endif()

# 构建优化提示
message(STATUS "")
message(STATUS "🚀 构建优化建议:")
if(NOT USING_VCPKG_ABSEIL)
    message(STATUS "   ⚡ 运行 'vcpkg install abseil:x64-windows' 可显著加速后续构建")
endif()
if(NOT USING_VCPKG_SPDLOG)
    message(STATUS "   ⚡ 运行 'vcpkg install spdlog:x64-windows' 可加速 spdlog 构建")
endif()
message(STATUS "   📦 所有 vcpkg 库将缓存，只需安装一次")
message(STATUS "")